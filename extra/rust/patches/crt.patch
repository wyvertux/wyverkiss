Note from Wyverkiss:
Since commit c7091f5a07fa665344d0ebafae5480f54337ef88, Rust on musl
included crtbegin.o, crtbeginS.o, crtend.o, and crtendS.o to avoid
segfaults. This patch will force Rust to use Clang's equivalent.

diff --git a/compiler/rustc_target/src/spec/crt_objects.rs.old b/compiler/rustc_target/src/spec/crt_objects.rs
index 2fc9ab2..0507d1f 100644
--- a/compiler/rustc_target/src/spec/crt_objects.rs.old
+++ b/compiler/rustc_target/src/spec/crt_objects.rs
@@ -64,23 +64,23 @@ pub(super) fn all(obj: &str) -> CrtObjects {
 
 pub(super) fn pre_musl_fallback() -> CrtObjects {
     new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::DynamicPicExe, &["Scrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::StaticPicExe, &["rcrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::DynamicDylib, &["crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticDylib, &["crti.o", "crtbeginS.o"]),
+        (LinkOutputKind::DynamicNoPicExe, &["crt1.o", "crti.o", "clang_rt.crtbegin-x86_64.o"]),
+        (LinkOutputKind::DynamicPicExe, &["Scrt1.o", "crti.o", "clang_rt.crtbegin-x86_64.o"]),
+        (LinkOutputKind::StaticNoPicExe, &["crt1.o", "crti.o", "clang_rt.crtbegin-x86_64.o"]),
+        (LinkOutputKind::StaticPicExe, &["rcrt1.o", "crti.o", "clang_rt.crtbegin-x86_64.o"]),
+        (LinkOutputKind::DynamicDylib, &["crti.o", "clang_rt.crtbegin-x86_64.o"]),
+        (LinkOutputKind::StaticDylib, &["crti.o", "clang_rt.crtbegin-x86_64.o"]),
     ])
 }
 
 pub(super) fn post_musl_fallback() -> CrtObjects {
     new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::DynamicPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::StaticPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::DynamicDylib, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticDylib, &["crtendS.o", "crtn.o"]),
+        (LinkOutputKind::DynamicNoPicExe, &["clang_rt.crtend-x86_64.o", "crtn.o"]),
+        (LinkOutputKind::DynamicPicExe, &["clang_rt.crtend-x86_64.o", "crtn.o"]),
+        (LinkOutputKind::StaticNoPicExe, &["clang_rt.crtend-x86_64.o", "crtn.o"]),
+        (LinkOutputKind::StaticPicExe, &["clang_rt.crtend-x86_64.o", "crtn.o"]),
+        (LinkOutputKind::DynamicDylib, &["clang_rt.crtend-x86_64.o", "crtn.o"]),
+        (LinkOutputKind::StaticDylib, &["clang_rt.crtend-x86_64.o", "crtn.o"]),
     ])
 }
 
diff --git a/src/bootstrap/compile.rs.old b/src/bootstrap/compile.rs
index 9398f21..75fffe5 100644
--- a/src/bootstrap/compile.rs.old
+++ b/src/bootstrap/compile.rs
@@ -197,7 +197,7 @@ fn copy_self_contained_objects(
                 DependencyType::TargetSelfContained,
             );
         }
-        for &obj in &["crtbegin.o", "crtbeginS.o", "crtend.o", "crtendS.o"] {
+        for &obj in &["clang_rt.crtbegin-x86_64.o", "clang_rt.crtend-x86_64.o"] {
             let src = compiler_file(builder, builder.cc(target), target, obj);
             let target = libdir_self_contained.join(obj);
             builder.copy(&src, &target);
